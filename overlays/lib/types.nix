## Additional useful types for nix-darwin modules.

{ lib
, pkgs
, ...
}:

rec
{
  ## WireGuard types.
  ##
  ## Note that these types correspond to wg-quick's configuration file
  ## format, which is used for macOS WireGuard configuration.
  ##
  ## ref:
  ## - For interface options, the macOS `wg-quick` bash script
  ##   - https://github.com/WireGuard/WireGuard/blob/92da6bd53f198009ed4eb6358a06acf3091f7981/src/tools/wg-quick/darwin.bash
  ## - For peer options, the wg(8) man page; see CONFIGURATION FILE FORMAT.
  ##
  ## Note that the wg-quick SaveConfig option is not supported, as
  ## it's not compatible with a declarative configuration.

  wireguard.peer = lib.types.submodule ({ name, ... }: {
    options = {
      name = lib.mkOption {
        type = pkgs.lib.types.nonEmptyStr;
        default = "${name}";
        example = "vpn.example.com";
        description = ''
          A short, descriptive name for the peer.

          If undefined, the name of the attribute set will be used.
        '';
      };

      publicKey = lib.mkOption {
        type = pkgs.lib.types.nonEmptyStr;
        example = "<key>";
        description = "The peer's base64 public key.";
      };

      presharedKeyFile = lib.mkOption {
        type = lib.types.nullOr lib.types.path;
        default = null;
        example = "/path/to/keyfile";
        description = ''
          An optional path to a file containing the WireGuard pre-shared
          key (PSK) for this peer, as a string literal, as generated by
          the command <command>wg genpsk</command>.

          If no value is provided, no PSK is used when communicating
          with this peer.
       '';
      };

      allowedIPs = lib.mkOption {
        type = lib.types.listOf (lib.types.either pkgs.lib.types.ipv4CIDR pkgs.lib.types.ipv6CIDR);
        default = [];
        example = [ "10.0.0.1/32" ];
        description = ''
          A list of IPv4 or IPv6 address (with CIDR masks) from which
          this peer is allowed to send incoming traffic, and to which
          outgoing traffic for this peer is directed. The catch-all IPv4
          address <literal>0.0.0.0/0</literal> may be specified for all
          matching IPv4 addresses, and the catch-all IPv6 address
          <literal>::/0</literal> may be specified for matching all IPv6
          addresses.
        '';
      };

      endpoint = lib.mkOption {
        type = lib.types.nullOr pkgs.lib.types.nonEmptyStr;
        default = null;
        example = "demo.wireguard.io:12913";
        description = ''
          An optional endpoint IP or hostname, followed by a colon and a
          port number.
        '';
      };

      persistentKeepalive = lib.mkOption {
        type = lib.types.nullOr (lib.types.ints.between 1 65535);
        default = null;
        example = 25;
        description = ''
          If non-null, this option specifies the period (in seconds)
          between keepalive packets. This may be useful for keeping a
          stateful firewall or NAT mapping alive.

          The default value is null (i.e., no keepalives are sent).
        '';
      };
    };
  });

  wireguard.interface = lib.types.submodule ({ name, ... }: {
    options = {
      name = lib.mkOption {
        type = pkgs.lib.types.nonEmptyStr;
        default = "${name}";
        example = "wg0";
        description = ''
          A short, descriptive name for the interface.

          If undefined, the name of the attribute set will be used.
        '';
      };

      address = lib.mkOption {
        type = lib.types.listOf (lib.types.either pkgs.lib.types.ipv4CIDR pkgs.lib.types.ipv6CIDR);
        default = [];
        example = [ "192.168.0.1/24" "2001:db8::1/128" ];
        description = ''
          A comma-separated list of IPv4 or IPv6 addresses (with CIDR
          masks) to be assigned to the interface.
        '';
      };

      privateKeyFile = lib.mkOption {
        type = lib.types.path;
        example = "/path/to/keyfile";
        description = ''
          The path to a file containing the interface's private
          WireGuard key, as generated by the command <command>wg
          genkey</command>.
        '';
      };

      listenPort = lib.mkOption {
        default = null;
        type = lib.types.nullOr pkgs.lib.types.port;
        example = 51820;
        description = ''
          An optional UDP port on which the WireGuard server listens for
          incoming connections. If null (the default), the port is
          chosen randomly.
        '';
      };

      mtu = lib.mkOption {
        type = lib.types.nullOr lib.types.ints.positive;
        default = null;
        example = 1320;
        description = ''
          An optional MTU value for the interface. If not specified,
          WireGuard will attempt to determine the value automatically.
        '';
      };

      dns = lib.mkOption {
        type = lib.types.listOf (lib.types.either pkgs.lib.types.ipv4NoCIDR pkgs.lib.types.ipv6NoCIDR);
        default = [];
        example = [ "8.8.8.8" ];
        description = ''
          A comma-separated list of IPv4 or IPv6 addresses to be used as
          system-wide DNS servers while the interface is up. If the list
          is empty, no changes will be made to the system's DNS settings
          when the interface is brought up.
        '';
      };

      table = lib.mkOption {
        type = lib.types.enum [ "off" "auto" ];
        default = "auto";
        example = "off";
        description = ''
          If <literal>auto</literal> (the default), WireGuard will add
          routes to the default system routing table for the interface's
          peer's allowed IPs. If <literal>none</literal>, no routes will
          be added.
        '';     
      };

      preUp = lib.mkOption {
        type = lib.types.nullOr lib.types.lines;
        default = null;
        description = ''
          An optional script that, if specified, WireGuard will run
          before setting up the interface.
        '';
      };

      postUp = lib.mkOption {
        type = lib.types.nullOr lib.types.lines;
        default = null;
        description = ''
          An optional script that, if specified, WireGuard will run
          after setting up the interface.
        '';
      };

      preDown = lib.mkOption {
        type = lib.types.nullOr lib.types.lines;
        default = null;
        description = ''
          An optional script that, if specified, WireGuard will run
          before tearing down the interface.
        '';
      };

      postDown = lib.mkOption {
        type = lib.types.nullOr lib.types.lines;
        default = null;
        description = ''
          An optional script that, if specified, WireGuard will run
          after tearing down the interface.
        '';
      };

      peers = lib.mkOption {
        type = lib.types.attrsOf wireguard.peer;
        default = {};
        description = ''
          WireGuard peers linked to this interface.
        '';
      };

      autoStart = lib.mkOption {
        type = lib.types.bool;
        default = false;
        description = ''
          If true, <literal>launchd</literal> will start this
          WireGuard interface automatically (i.e., it will be started
          at boot time), and keep it alive unless explicitly stopped
          by the user.
        '';
      };

      logFile = lib.mkOption {
        type = lib.types.path;
        default = "/var/log/wireguard-${name}.log";
        example = "/Users/bob/Library/Logs/wireguard.log";
        description = ''
          The path to the file where WireGuard stdout and stderr will be
          logged for this interface.
        '';
      };
    };
  });    
}
